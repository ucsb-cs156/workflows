# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: "14-backend-pitest: Java Mutation Testing (Pitest)"

on:
  workflow_call:
    secrets:
      GH_TOKEN:
        required: true
    inputs:
      JAVA_DISTRIBUTION:
        required: false
        type: string
        default: 'temurin'

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: read
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - uses: actions/checkout@v4
    - name: Figure out branch name
      id: get-branch-name
      run: | 
          GITHUB_HEAD_REF="${GITHUB_HEAD_REF}"
          echo GITHUB_HEAD_REF=${GITHUB_HEAD_REF}
          GITHUB_REF_CLEANED=${GITHUB_REF/refs\/heads\//}
          echo GITHUB_REF_CLEANED=${GITHUB_REF_CLEANED}
          GITHUB_REF_CLEANED=${GITHUB_REF_CLEANED//\//-}
          echo GITHUB_REF_CLEANED=${GITHUB_REF_CLEANED}
          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF_CLEANED}}"
          echo "branch_name=${BRANCH}"
          echo "branch_name=${BRANCH}" >> "$GITHUB_ENV"  
          BRANCH_CLEANED="${BRANCH//\//-}"
          echo "branch_name_cleaned=${BRANCH_CLEANED}"
          echo "branch_name_cleaned=${BRANCH_CLEANED}" >> "$GITHUB_ENV"  
    - name: Set up Java (version from .java-version file)
      uses: actions/setup-java@v4
      with:
         distribution: ${{ inputs.JAVA_DISTRIBUTION }} 
         java-version-file: ./.java-version
         cache: 'maven'
         cache-dependency-path: 'pom.xml' 
    - name: Build with Maven
      run: mvn -ntp -B  test 
    
    # Note that we DO NOT download history in this job;
    # this job is intended as a "reset" of the history each time the 
    # main branch changes

    - name: Pitest
      run: mvn -ntp -B pitest:mutationCoverage -DmutationThreshold=100 
    - name: Upload Pitest History to Artifacts
      if: always() # always upload artifacts, even if tests fail
      uses: actions/upload-artifact@v4
      with:
        name: pitest-${{env.branch_name_cleaned}}-history.bin
        path: target/pit-history/history.bin
    - name: Upload Pitest to Artifacts
      if: always() # always upload artifacts, even if tests fail
      uses: actions/upload-artifact@v4
      with:
        name: pitest
        path: target/pit-reports/* 

    - name: Get PR number
      if: always() # always upload artifacts, even if tests fail
      id: get-pr-num
      run: |
        echo "GITHUB_EVENT_PATH=${GITHUB_EVENT_PATH}"
        pr_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
        echo "pr_number=${pr_number}" 
        echo "pr_number=${pr_number}" >> "$GITHUB_ENV"

        if [ "${pr_number}" == "null" ]; then
          prefix=""
        else
          prefix="prs/${pr_number}/"
        fi
        echo "prefix=${prefix}"
        echo "prefix=${prefix}" >> "$GITHUB_ENV"

    - name: Deploy ðŸš€
      if: always() # always upload artifacts, even if tests fail
      uses: Wandalen/wretry.action@master
      with:
        action: JamesIves/github-pages-deploy-action@v4
        attempt_limit: 3
        attempt_delay: 5000
        with: |
          branch: gh-pages # The branch the action should deploy to.
          folder: target/pit-reports # The folder where the files we want to publish are located
          clean: true # Automatically remove deleted files from the deploy branch
          target-folder: ${{env.prefix}}pitest # The folder that we serve our files from
          token: ${{ secrets.GH_TOKEN }}